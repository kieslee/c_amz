# -*- coding: UTF-8 -*-import osimport sysfrom bs4 import BeautifulSoupfrom scrapy.selector import Selector# 默认的处理方法page_analyze_classes = {}# 排除掉__init__.pyexclude_files = ['__init__.py', 'base.py']def find_needed_packages(dir_path):    result = []    for root, dirs, files in os.walk(dir_path):        print '------'        # pdb.set_trace()        for file in files:            if file[-3:] != '.py':                continue            excluded = False            filename = os.path.join(root, file)            for ef in exclude_files:                if filename.find(ef) >= 0:                    print 'exclude: ', filename                    excluded = True                    break            if excluded:                continue            if filename.startswith('./'):                filename = filename[2:]            filename_list = filename.split('.')            filename = filename_list[0]            result.append(filename.replace('/', '.'))    return resultdef register_page_analyze(pa_class, mtype):    global page_analyze_classes    if page_analyze_classes.has_key(mtype) is False:        page_analyze_classes[mtype] = []    page_analyze_classes[mtype].append(pa_class)def display_registed_class():    global page_analyze_classes    print page_analyze_classesclass PAGE_ITEM(object):    def __init__(self, content):        self.content = content        self.soup = BeautifulSoup(content, 'lxml')        self.selector = Selector(text=content)    def get_price(self):        global page_analyze_classes        price_analyze_classes = page_analyze_classes['price']        for pac in price_analyze_classes:            page_item = pac(self.soup, self.selector)            item = page_item.get_item()            if item is not None:                return item    def get_title(self):        global page_analyze_classes        title_analyze_classes = page_analyze_classes['title']        for tac in title_analyze_classes:            page_item = tac(self.soup, self.selector)            item = page_item.get_item()            if item is not None:                return item    def get_sell_rank(self):        global page_analyze_classes        sellrank_analyze_classes = page_analyze_classes['sell_rank']        for srac in sellrank_analyze_classes:            page_item = srac(self.soup, self.selector)            item = page_item.get_item()            if item is not None:                return item    def get_listing(self):        global page_analyze_classes        listing_analyze_classes = page_analyze_classes['listing']        for lac in listing_analyze_classes:            page_item = lac(self.soup, self.selector)            item = page_item.get_item()            if item is not None:                return item