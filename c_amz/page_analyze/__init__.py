# -*- coding: UTF-8 -*-import osimport sysfrom bs4 import BeautifulSoupfrom scrapy.selector import Selectorclass PA_General(object):    __tagclass__ = 'default'    def __init__(self, soup, selector):        self.soup = soup        self.selector = selector    def get_ProductTitle(self):        p = self.selector.xpath('//*[@id="productTitle"]/text()').extract_first().strip('\n          ')        return p    def get_Price(self):        price = self.selector.xpath('//*[@id="priceblock_ourprice"]/text()').extract_first()        if price is None:            price = self.selector.xpath('//*[@id="priceblock_saleprice"]/text()').extract_first()        return price    def get_Stars(self):        stars = self.selector.xpath('//*[@id="reviewStarsLinkedCustomerReviews"]/i/span/text()').extract_first()        if stars is not None:            return stars        stars = self.selector.xpath('//*[@id="acrCustomerWriteReviewText"]/text()').extract_first()        if stars == 'Be the first to review this item':            stars = '0.0 out of 5 stars'        if stars is not None:            return stars        return stars    def get_Rank(self):        for t in self.soup.find_all('table'):            t_class = t.get('class')            if t_class is None:                continue            if 'prodDetTable' not in t_class:                continue            for tr in t.find_all('tr'):                # print tr.th.get_text()                if (tr.th.get_text()).find('Sellers Rank') >= 0:                    return tr.td.get_text().strip(' ')        return None# 默认的处理方法page_analyze_classes = {'default': PA_General}# 排除掉__init__.pyexclude_files = ['__init__.py', 'base.py']def find_needed_packages(dir_path):    result = []    for root, dirs, files in os.walk(dir_path):        print '------'        # pdb.set_trace()        for file in files:            if file[-3:] != '.py':                continue            excluded = False            filename = os.path.join(root, file)            for ef in exclude_files:                if filename.find(ef) >= 0:                    print 'exclude: ', filename                    excluded = True                    break            if excluded:                continue            if filename.startswith('./'):                filename = filename[2:]            filename_list = filename.split('.')            filename = filename_list[0]            result.append(filename.replace('/', '.'))    return resultdef register_page_analyze(pa_class):    global page_analyze_classes    # import pdb; pdb.set_trace()    tag_class = pa_class.__tagclass__    tag_class_list = tag_class.split('.')    if len(tag_class_list) == 0:        raise Exception('tagclass format invalid')    main_class_tag = tag_class_list[0]    sub_class_tag = ''    for item in tag_class_list[1:]:        if sub_class_tag != '':            sub_class_tag += '.'        sub_class_tag = sub_class_tag + item    if sub_class_tag == '':        sub_class_tag = 'default'    if page_analyze_classes.has_key(main_class_tag) is False:        page_analyze_classes[main_class_tag] = {}    page_analyze_classes[main_class_tag][sub_class_tag] = pa_classdef display_registed_class():    global page_analyze_classes    print page_analyze_classesclass PAGE_ITEM(object):    def __init__(self, content, class_name):        self.content = content        self.soup = BeautifulSoup(content)        self.selector = Selector(text=content)        self.class_name = class_name        self.parsed = False        # wanted infos        self.title = None        self.price = None        self.stars = None        self.best_sell_rank = None    def get_Infos(self):        global page_analyze_classes        for pa_class in page_analyze_classes:            if self.parsed:                break            page_item = pa_class(self.soup, self.selector)            if self.title is None:                self.title = page_item.get_ProductTitle()            if self.price is None:                self.price = page_item.get_Price()            if self.stars is None:                self.stars = page_item.get_Stars()            if self.best_sell_rank is None:                self.best_sell_rank = page_item.get_Rank()            if self.title is not None and self.price is not None \                    and self.stars is not None and self.best_sell_rank is not None:                self.parsed = True                break        return self.title, self.price, self.stars, self.best_sell_rank